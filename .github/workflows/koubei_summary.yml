name: koubei_summary

on:
  workflow_dispatch:
    inputs:
      series_id:
        description: "Autohome series ID"
        required: true
        type: string
      pages:
        description: "Number of review pages to fetch"
        required: true
        type: string

permissions:
  contents: write

env:
  SERIES_ID: ${{ inputs.series_id }}
  MIN_DIFF: "3"  # 新規IDがこの数以上でLLM要約を再実行（省コストの閾値）

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4 lxml requests pandas openai
          python -m playwright install chromium || true

      # ① Playwrightでレビュー本文取得（詳細HTML/JSONを収集しZIP化）
      - name: Fetch Koubei detail pages
        run: |
          set -e
          python tools/koubei_summary_playwright.py "${{ inputs.series_id }}" "${{ inputs.pages }}"
          test -s "autohome_reviews_${{ inputs.series_id }}.zip"

      # ② ZIP→CSV 変換
      - name: Convert ZIP to CSV
        run: |
          set -e
          python tools/koubei_summary_to_csv.py "autohome_reviews_${{ inputs.series_id }}.zip"
          test -s "autohome_reviews_${{ inputs.series_id }}.csv"

      # ③ 差分しきい値でLLM生成の要否を判定
      - name: Decide whether to (re)generate story by diff
        id: diffguard
        run: |
          set -e
          python tools/koubei_review_diff.py --min-diff "${MIN_DIFF}"

      # ④ LLMで要約を生成（差分が閾値以上のときのみ）
      - name: Generate story with LLM
        if: ${{ steps.diffguard.outputs.do_story == 'true' }}
        run: |
          set -e
          python tools/koubei_storywriter.py "${{ inputs.series_id }}"
          test -s "autohome_reviews_${{ inputs.series_id }}_story.txt"
          test -s "autohome_reviews_${{ inputs.series_id }}_story.md"
          mkdir -p "cache/${{ inputs.series_id }}"
          cp "autohome_reviews_${{ inputs.series_id }}_story.txt" "cache/${{ inputs.series_id }}/story.txt"

      # ⑤ スキップ時の処理を修正：キャッシュがなければ1回だけ生成（その他一切変更なし）
      - name: Ensure story when skipped (reuse cache or generate once)
        if: ${{ steps.diffguard.outputs.do_story == 'false' }}
        run: |
          set -e
          ID="${{ inputs.series_id }}"
          if [ -s "cache/${ID}/story.txt" ]; then
            cp "cache/${ID}/story.txt" "autohome_reviews_${ID}_story.txt"
            cp "cache/${ID}/story.txt" "autohome_reviews_${ID}_story.md"
          else
            echo "No cached story for ${ID}; generating once to seed cache."
            python tools/koubei_storywriter.py "${ID}"
            test -s "autohome_reviews_${ID}_story.txt"
            test -s "autohome_reviews_${ID}_story.md"
            mkdir -p "cache/${ID}"
            cp "autohome_reviews_${ID}_story.txt" "cache/${ID}/story.txt"
          fi

      # ⑥ サニティチェック
      - name: Sanity check outputs
        run: |
          set -e
          ID="${{ inputs.series_id }}"
          ls -lh autohome_reviews_${ID}.zip autohome_reviews_${ID}.csv || true
          ls -lh autohome_reviews_${ID}_story.txt autohome_reviews_${ID}_story.md || true
          wc -l autohome_reviews_${ID}.csv || true
          wc -c autohome_reviews_${ID}_story.txt autohome_reviews_${ID}_story.md || true

      # ⑦ 従来の成果物をアップロード（既存の命名・内容は維持）
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autohome-reviews-${{ inputs.series_id }}
          path: |
            autohome_reviews_${{ inputs.series_id }}.zip
            autohome_reviews_${{ inputs.series_id }}.csv
            autohome_reviews_${{ inputs.series_id }}_story.txt
            autohome_reviews_${{ inputs.series_id }}_story.md

      # ⑧ summary ZIP をローカルで作成
      - name: Pack summary zip (autohome-summary-<id>.zip)
        run: |
          set -e
          ID="${{ inputs.series_id }}"
          rm -f "autohome-summary-${ID}.zip"
          zip -j "autohome-summary-${ID}.zip" \
            "autohome_reviews_${ID}.zip" \
            "autohome_reviews_${ID}.csv" \
            "autohome_reviews_${ID}_story.txt" \
            "autohome_reviews_${ID}_story.md"

      # ⑨ summary ZIP をアーティファクトとしてアップロード
      - name: Upload summary zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: autohome-summary-${{ inputs.series_id }}
          path: autohome-summary-${{ inputs.series_id }}.zip

      # ⑩ 直後にアーティファクトをダウンロード
      - name: Download summary zip artifact
        uses: actions/download-artifact@v4
        with:
          name: autohome-summary-${{ inputs.series_id }}
          path: _artifacts

      # ⑪ ダウンロードしたアーティファクトZIPから story.txt を output/<id>/ に抽出
      - name: Extract story.txt from artifact zip to output/<id>
        env:
          ARTIFACT_DIR: _artifacts
          SERIES_ID: ${{ inputs.series_id }}
        run: |
          set -e
          python tools/extract_story_to_output.py

      # ⑫ story.txt をコミット（変更がある場合のみ）
      - name: Commit story.txt to repository
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "output/${{ inputs.series_id }}/story.txt"
          git diff --cached --quiet || git commit -m "Add/Update story.txt for ${{ inputs.series_id }}"
          git push
