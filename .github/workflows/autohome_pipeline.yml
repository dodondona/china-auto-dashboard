name: autohome_pipeline

on:
  workflow_dispatch:

jobs:
  # === Job A: spec_links.jsonl を必ず作る ===
  build_spec_links:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ★ 必ず spec_links.jsonl を生成（ZIPの構成を尊重・追加ファイルなし）
      - name: Build spec_links.jsonl (robust, no Python script)
        run: |
          set -euo pipefail
          OUT=spec_links.jsonl
          : > "$OUT"

          # 1) 既に存在していれば採用
          for p in spec_links.jsonl public/spec_links.jsonl data/spec_links.jsonl; do
            if [ -s "$p" ]; then
              cp "$p" "$OUT"
              echo "✅ copied from $p"
              exit 0
            fi
          done

          # 2) rank_links から組み立て（JSONL/JSON配列どちらも可）
          for p in public/rank_links.jsonl data/rank_links.jsonl; do
            if [ -s "$p" ]; then
              echo "⚙️ build from $p"
              if jq -e 'type=="array"' "$p" >/dev/null 2>&1; then
                SRC_CMD="jq -c '.[]' \"$p\""
              else
                SRC_CMD="cat \"$p\""
              fi
              rank=1
              eval "$SRC_CMD" | while read -r line; do
                sid=$(echo "$line" | jq -r '.series_id // .seriesId // .sid // empty')
                [ -n "$sid" ] || continue
                url="https://www.autohome.com.cn/config/series/${sid}.html#pvareaid=3454437"
                printf '{"rank": %d, "series_id": "%s", "spec_url": "%s"}\n' "$rank" "$sid" "$url" >> "$OUT"
                rank=$((rank+1))
              done
              if [ -s "$OUT" ]; then
                echo "✅ wrote $OUT"
                exit 0
              fi
            fi
          done

          echo "::error ::spec_links.jsonl の元データが見つかりません（spec_links.jsonl / public|data/spec_links.jsonl / public|data/rank_links.jsonl のいずれかを配置してください）"
          exit 1

      - name: Upload spec_links.jsonl
        uses: actions/upload-artifact@v4
        with:
          name: spec_links
          path: spec_links.jsonl
          if-no-files-found: error

  # === Job B: spec_links を使って翻訳付きCSVを生成 ===
  from_spec_links_to_config:
    needs: build_spec_links
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ★ Playwright + OpenAI を必ず導入（翻訳を壊さない最小セット）
      - name: Install deps (Playwright + OpenAI)
        run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.40,<2" playwright
          python -m playwright install chromium
          python -c "import openai; print('openai version:', openai.__version__)"

      - name: Download spec_links artifact
        uses: actions/download-artifact@v4
        with:
          name: spec_links
          path: .

      - name: Prepare output dir
        run: mkdir -p public/config_csv

      - name: Run autohome_config_to_csv per link (翻訳あり)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -eux
          test -s spec_links.jsonl
          cat spec_links.jsonl | jq -c '.[]' | while read -r line; do
            rank=$(echo "$line" | jq -r .rank)
            series_id=$(echo "$line" | jq -r .series_id)
            spec_url=$(echo "$line" | jq -r .spec_url)
            printf -v rank3 "%03d" "$rank"
            echo "::group::[${rank3}] ${series_id} -> ${spec_url}"
            python tools/autohome_config_to_csv.py --series "${series_id}"
            echo "::endgroup::"
          done

      - name: Upload config CSVs
        uses: actions/upload-artifact@v4
        with:
          name: autohome-config-csvs
          path: public/config_csv
          if-no-files-found: error
