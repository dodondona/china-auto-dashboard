name: autohome_pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: "30 1 * * *"

jobs:
  build_autohome_pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install playwright
          python -m playwright install chromium
          python -m playwright install-deps

      - name: Install CJK fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            fonts-noto-cjk fonts-noto-cjk-extra \
            fonts-wqy-zenhei fonts-wqy-microhei \
            fonts-noto-color-emoji
          fc-cache -f -v

      - name: Run stage1 (capture ranking + images)
        run: |
          set -eux
          python tools/rank_capture_images_and_csv.py

      - name: Preview ranking CSV
        run: |
          if [ -s public/autohome_ranking_with_image_urls.csv ]; then
            head -n 5 public/autohome_ranking_with_image_urls.csv
            wc -l public/autohome_ranking_with_image_urls.csv
          else
            echo "ranking CSV missing or empty"
            exit 1
          fi

      - name: Check captured images
        run: |
          if ls -1 public/autohome_images/*.png >/dev/null 2>&1; then
            echo "Captured $(ls -1 public/autohome_images/*.png | wc -l) images"
            ls -lh public/autohome_images/*.png | head
          else
            echo "Captured 0 images"
          fi

      - name: Run stage2 (merge image CSVs only if csv/ exists)
        run: |
          set -eux
          if ls csv/*.csv 1>/dev/null 2>&1; then
            python tools/stage2_images_to_public.py public/autohome_ranking_with_image_urls.csv
          else
            echo "Skip stage2: csv/ folder empty, avoid overwriting"
          fi

      - name: Upload artifact (ranking csv)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autohome-ranking-csvs
          path: public/autohome_ranking_with_image_urls.csv
          if-no-files-found: error

      - name: Build spec_links.csv from ranking CSV
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          SRC="public/autohome_ranking_with_image_urls.csv"
          OUT="public/spec_links.csv"
          test -s "$SRC" || { echo "missing $SRC"; exit 1; }

          rm -f build_spec_links.py
          echo 'import csv, re' >> build_spec_links.py
          echo 'src = "public/autohome_ranking_with_image_urls.csv"' >> build_spec_links.py
          echo 'out = "public/spec_links.csv"' >> build_spec_links.py
          echo 'pat = re.compile(r"https?://(?:\\w+\\.)?autohome\\.com\\.cn/(\\d+)(?:/|\\?|$)")' >> build_spec_links.py
          echo 'CANDIDATES = ["link","series_url","series_page","url","series","page"]' >> build_spec_links.py
          echo 'with open(src, encoding="utf-8") as f, open(out, "w", encoding="utf-8", newline="") as g:' >> build_spec_links.py
          echo '    r = csv.DictReader(f)' >> build_spec_links.py
          echo '    w = csv.writer(g)' >> build_spec_links.py
          echo '    w.writerow(["series_id","spec_url"])' >> build_spec_links.py
          echo '    rows = 0' >> build_spec_links.py
          echo '    hits = 0' >> build_spec_links.py
          echo '    for row in r:' >> build_spec_links.py
          echo '        rows += 1' >> build_spec_links.py
          echo '        val = ""' >> build_spec_links.py
          echo '        for k in CANDIDATES:' >> build_spec_links.py
          echo '            if k in row and row[k]:' >> build_spec_links.py
          echo '                s = row[k].strip()' >> build_spec_links.py
          echo '                if s:' >> build_spec_links.py
          echo '                    val = s' >> build_spec_links.py
          echo '                    break' >> build_spec_links.py
          echo '        if not val:' >> build_spec_links.py
          echo '            for v in row.values():' >> build_spec_links.py
          echo '                s = (v or "").strip()' >> build_spec_links.py
          echo '                if "autohome.com.cn" in s:' >> build_spec_links.py
          echo '                    val = s' >> build_spec_links.py
          echo '                    break' >> build_spec_links.py
          echo '        m = pat.search(val)' >> build_spec_links.py
          echo '        if not m:' >> build_spec_links.py
          echo '            continue' >> build_spec_links.py
          echo '        sid = m.group(1)' >> build_spec_links.py
          echo '        hits += 1' >> build_spec_links.py
          echo '        w.writerow([sid, f"https://www.autohome.com.cn/config/series/{sid}.html#pvareaid=3454437"])' >> build_spec_links.py
          echo 'print("done")' >> build_spec_links.py

          python build_spec_links.py
          rm -f build_spec_links.py

          if [ ! -s "$OUT" ] || [ "$(wc -l < "$OUT")" -le 1 ]; then
            echo "spec_links.csv is empty"
            exit 1
          fi
          head -n 5 "$OUT"

      - name: Upload artifact (spec links)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autohome-spec-links
          path: public/spec_links.csv
          if-no-files-found: error
