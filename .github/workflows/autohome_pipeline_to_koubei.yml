name: autohome_pipeline_to_koubei

on:
  workflow_run:
    workflows: ["autohome_pipeline"]
    types: [completed]

permissions:
  contents: write

jobs:
  prepare_series_from_pipeline:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      series: ${{ steps.mkjson.outputs.series }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools (jq, unzip, curl)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip curl

      # config_to_csv と同じく、artifactが確定するまで少し待つ（必要に応じて調整）
      - name: Wait for upstream artifacts to be ready
        run: |
          echo "Waiting 60 seconds for autohome-series-urls to finalize..."
          sleep 60

      - name: Download artifact (autohome-series-urls)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p artifact
          # 直近の autohome-series-urls アーティファクトを取得
          # 実装は既存のまま（省略）

      - name: Make JSON array of series IDs
        id: mkjson
        run: |
          set -euo pipefail
          # 既存実装のまま：artifact 内から series_id をかき集めて /tmp/series_ids.tmp => artifact/series_ids.txt => JSON
          # （省略：元ファイルのパース・正規表現は現行のあなたのYAMLどおり）
          if [ -f artifact/series_ids.txt ]; then
            src="artifact/series_ids.txt"
          else
            # （既存のgrep処理一式をここに保持）
            :
          fi
          echo "Top of series IDs:"
          head -n 10 "$src" || true
          json=$(awk 'NF>0' "$src" | sed 's/[^0-9]//g' | awk 'NF>0' | jq -R -s -c 'split("\n")|map(select(length>0))')
          echo "series=$json" >> "$GITHUB_OUTPUT"

  # ここから各IDで koubei を回す（koubei_summary.yml の内容を完全移植）
  koubei_from_pipeline:
    needs: prepare_series_from_pipeline
    if: ${{ needs.prepare_series_from_pipeline.outputs.series != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        series: ${{ fromJSON(needs.prepare_series_from_pipeline.outputs.series) }}

    env:
      SERIES_ID: ${{ matrix.series }}
      MIN_DIFF: "3"  # 新規IDがこの数以上でLLM要約を再実行（省コストの閾値）

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      # ✅ 前回実行時の cache を復元（別実行間でも有効）
      - name: Restore koubei cache
        uses: actions/cache/restore@v4
        with:
          path: cache/
          key: koubei-cache-${{ matrix.series }}-${{ github.run_id }}
          restore-keys: |
            koubei-cache-${{ matrix.series }}-
            koubei-cache-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4 lxml requests pandas openai
          python -m playwright install chromium || true

      # ① Playwrightでレビュー本文取得（詳細HTML/JSONを収集しZIP化）
      - name: Fetch Koubei detail pages
        run: |
          set -e
          python tools/koubei_summary_playwright.py "${{ matrix.series }}" "5"
          test -s "autohome_reviews_${{ matrix.series }}.zip"

      # ② ZIP→CSV 変換
      - name: Convert ZIP to CSV
        run: |
          set -e
          python tools/koubei_summary_to_csv.py "autohome_reviews_${{ matrix.series }}.zip"
          test -s "autohome_reviews_${{ matrix.series }}.csv"

      # ③ 差分しきい値でLLM生成の要否を判定
      - name: Decide whether to (re)generate story by diff
        id: diffguard
        run: |
          set -e
          python tools/koubei_review_diff.py --min-diff "${MIN_DIFF}"

      # ④ LLMで要約を生成（差分が閾値以上のときのみ）
      - name: Generate story with LLM
        if: ${{ steps.diffguard.outputs.do_story == 'true' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          python tools/koubei_storywriter.py "${{ matrix.series }}"
          test -s "output/koubei/${{ matrix.series }}/story.txt"
          test -s "output/koubei/${{ matrix.series }}/story.md"
          mkdir -p "cache/${{ matrix.series }}"
          cp "output/koubei/${{ matrix.series }}/story.txt" "cache/${{ matrix.series }}/story.txt"

      # ⑤ スキップ時：キャッシュ再利用。なければ1回だけ生成してseed
      - name: Ensure story when skipped (reuse cache or generate once)
        if: ${{ steps.diffguard.outputs.do_story == 'false' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          ID="${{ matrix.series }}"
          if [ -s "cache/${ID}/story.txt" ]; then
            mkdir -p "output/koubei/${ID}"
            cp "cache/${ID}/story.txt" "output/koubei/${ID}/story.txt"
            cp "cache/${ID}/story.txt" "output/koubei/${ID}/story.md"
          else
            echo "No cached story for ${ID}; generating once to seed cache."
            python tools/koubei_storywriter.py "${ID}"
            test -s "output/koubei/${ID}/story.txt"
            test -s "output/koubei/${ID}/story.md"
            mkdir -p "cache/${ID}"
            cp "output/koubei/${ID}/story.txt" "cache/${ID}/story.txt"
          fi

      # ⑥ サニティチェック
      - name: Sanity check outputs
        run: |
          set -e
          ID="${{ matrix.series }}"
          ls -lh autohome_reviews_${ID}.zip autohome_reviews_${ID}.csv || true
          ls -lh output/koubei/${ID}/story.txt output/koubei/${ID}/story.md || true
          wc -l autohome_reviews_${ID}.csv || true
          wc -c output/koubei/${ID}/story.txt output/koubei/${ID}/story.md || true

      # ⑦ 従来の成果物をアップロード（任意）
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autohome-reviews-${{ matrix.series }}
          path: |
            autohome_reviews_${{ matrix.series }}.zip
            autohome_reviews_${{ matrix.series }}.csv
            output/koubei/${{ matrix.series }}/story.txt
            output/koubei/${{ matrix.series }}/story.md

      # ⑧ summary ZIP をローカルで作成
      - name: Pack summary zip (autohome-summary-<id>.zip)
        run: |
          set -e
          ID="${{ matrix.series }}"
          rm -f "autohome-summary-${ID}.zip"
          zip -j "autohome-summary-${ID}.zip" \
            "autohome_reviews_${ID}.zip" \
            "autohome_reviews_${ID}.csv" \
            "output/koubei/${ID}/story.txt" \
            "output/koubei/${ID}/story.md"

      # ⑨ summary ZIP をアーティファクトとしてアップロード
      - name: Upload summary zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: autohome-summary-${{ matrix.series }}
          path: autohome-summary-${{ matrix.series }}.zip

      # ⑩ 直後にアーティファクトをダウンロード
      - name: Download summary zip artifact
        uses: actions/download-artifact@v4
        with:
          name: autohome-summary-${{ matrix.series }}
          path: _artifacts

      # ⑪ ダウンロードしたアーティファクトZIPから story.txt を output/koubei/<id>/ に抽出
      - name: Extract story.txt from artifact zip to output/koubei/<id>
        env:
          ARTIFACT_DIR: _artifacts
          SERIES_ID: ${{ matrix.series }}
        run: |
          set -e
          python tools/extract_story_to_output.py

      # ⑫ story.txt をコミット（変更がある場合のみ）
      - name: Commit story.txt to repository
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "output/koubei/${{ matrix.series }}/story.txt"
          git diff --cached --quiet || git commit -m "Add/Update koubei story for ${{ matrix.series }}"
          git push

      # ✅ 更新後の cache を保存（次回実行で復元される）
      - name: Save koubei cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: cache/
          key: koubei-cache-${{ matrix.series }}-${{ github.run_id }}
