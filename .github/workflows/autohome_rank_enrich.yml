name: Autohome Rank Enrich (brand column + tiles artifacts)

on:
  workflow_dispatch:
    inputs:
      target_month:
        description: "Target month (YYYY-MM), e.g., 2025-08"
        required: false
  schedule:
    - cron: "0 3 5 * *"   # 毎月5日 03:00 UTC（任意）

jobs:
  autohome-rank-enrich:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    env:
      TARGET_MONTH: ${{ inputs.target_month }}

    steps:
      # 0) チェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 1) 月指定が無ければ先月にフォールバック
      - name: Set TARGET_MONTH if empty (fallback to previous month)
        id: setmonth
        shell: bash
        run: |
          if [ -z "${TARGET_MONTH}" ]; then
            TARGET_MONTH=$(date -u -d "$(date +%Y-%m-15) -1 month" +%Y-%m)
            echo "TARGET_MONTH=$TARGET_MONTH" >> $GITHUB_ENV
          else
            echo "TARGET_MONTH=$TARGET_MONTH" >> $GITHUB_ENV
          fi
          echo "Using TARGET_MONTH=${TARGET_MONTH}"

      # 2) Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) 依存インストール（既存requirements + openai）
      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install openai

      # 4) Playwright Chromium（既存パイプラインが使う場合）
      - name: Install Playwright Chromium (if needed by existing pipeline)
        shell: bash
        run: |
          python - <<'PY'
          import sys, subprocess
          try:
              import playwright  # noqa
              subprocess.run([sys.executable, "-m", "playwright", "install", "chromium"], check=True)
          except Exception:
              print("playwright not installed; skipping.")
          PY

      # 5) 既存のVLMパイプラインで一次CSVを作る
      - name: Run existing VLM pipeline to produce the raw CSV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          mkdir -p data
          # ←ここはあなたの既存の実行コマンドそのままでOK
          python vlm_rank_reader.py \
            --from-url "https://www.autohome.com.cn/rank/1/${TARGET_MONTH}.html" \
            --fullpage-split \
            --tile-height 1200 \
            --tile-overlap 220 \
            --out "data/autohome_raw_${TARGET_MONTH}.csv"
          # ↑ この実行で tiles/ に tile_00.jpg ... が作られる想定

      # 6) タイル画像のインデックスHTMLを安全に生成（Heredoc版）
      - name: Build tiles index (safe heredoc)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d tiles ]; then
            # CSS/HTMLのヘッダ部分
            cat > tiles/index.html <<'HTML'
<!doctype html>
<meta charset="utf-8">
<title>Tiles Preview</title>
<style>
  :root{color-scheme:dark light}
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
       padding:24px;background:#111;color:#eee}
  .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:12px}
  figure{margin:0;background:#222;padding:8px;border-radius:8px}
  figcaption{font-size:12px;margin-top:6px;color:#ccc;word-break:break-all}
  img{max-width:100%;height:auto;display:block;border-radius:4px}
</style>
<h1>Autohome tiles</h1>
<div class="grid">
HTML
            # 画像サムネを並べる
            shopt -s nullglob
            for f in tiles/*.jpg tiles/*.jpeg tiles/*.png; do
              bn="$(basename "$f")"
              printf '<figure><img src="%s" alt="%s"><figcaption>%s</figcaption></figure>\n' "$bn" "$bn" "$bn" >> tiles/index.html
            done
            echo '</div>' >> tiles/index.html
          else
            echo "no tiles/ directory found"
          fi

      # 7) タイル画像をArtifactsへ（方法1の本体）
      - name: Upload tiles as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: autohome-tiles-${{ env.TARGET_MONTH }}
          path: |
            tiles/*.jpg
            tiles/*.jpeg
            tiles/*.png
            tiles/index.html
          if-no-files-found: warn
          retention-days: 14

      # 8) brand列付与の後処理（tools/enrich_brand_llm.py）
      - name: Enrich brand column (new CSV)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          python tools/enrich_brand_llm.py \
            --in  "data/autohome_raw_${TARGET_MONTH}.csv" \
            --out "data/autohome_rank_${TARGET_MONTH}.csv" \
            --no-llm

      # 9) CSVもArtifactsに入れておく（任意）
      - name: Upload CSVs as artifact (optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: autohome-csvs-${{ env.TARGET_MONTH }}
          path: |
            data/autohome_raw_${{ env.TARGET_MONTH }}.csv
            data/autohome_rank_${{ env.TARGET_MONTH }}.csv
          if-no-files-found: ignore
          retention-days: 30

      # 10) リポジトリへCSVをコミット（既存運用を維持）
      - name: Commit CSVs
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "data/autohome_raw_${TARGET_MONTH}.csv" "data/autohome_rank_${TARGET_MONTH}.csv" || true
          git commit -m "autohome rank CSV (raw & brand) for ${TARGET_MONTH}" || echo "no changes"
          git push
