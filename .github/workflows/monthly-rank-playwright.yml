name: Monthly append series_url & enrich brand/series (rank/1 infinite scroll)

on:
  schedule:
    - cron: '15 0 3 * *'   # JST 09:15 毎月3日
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 中国語フォント（念のため）
      - name: Install CJK fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-wqy-zenhei fonts-wqy-microhei
          sudo fc-cache -fv

      # Playwright Chromium（必要なら）
      - name: Install Playwright Chromium (if needed by existing pipeline)
        run: |
          python - <<'PY'
          import sys, subprocess
          try:
            import playwright  # noqa
            subprocess.run([sys.executable, "-m", "playwright", "install", "chromium"], check=True)
          except Exception:
            pass
          PY

      # 入出力パスの決定（最新 RAW を検出 or 入力から計算）
      - name: Resolve paths
        id: paths
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.target_month }}" ]; then
            YM="${{ github.event.inputs.target_month }}"
            RAW="data/autohome_raw_${YM}.csv"
            if [ ! -f "$RAW" ]; then
              echo "❌ $RAW が見つかりません"; exit 1
            fi
          else
            RAW=$(ls -1t data/autohome_raw_*.csv | head -n 1 || true)
            if [ -z "$RAW" ]; then
              echo "❌ data/autohome_raw_*.csv が見つかりません"; exit 1
            fi
            echo "→ 最新CSVを使用: $RAW"
            YM=$(basename "$RAW" | sed -E 's/^autohome_raw_([0-9]{4}-[0-9]{2}).*/\1/')
          fi

          WITH_SERIES="data/autohome_raw_${YM}_with_series.csv"
          WITH_BRAND="data/autohome_raw_${YM}_with_brand.csv"
          WITH_BRAND_JA="data/autohome_raw_${YM}_with_brand_ja.csv"

          echo "ym=${YM}"                    >> $GITHUB_OUTPUT
          echo "raw=${RAW}"                  >> $GITHUB_OUTPUT
          echo "with_series=${WITH_SERIES}"  >> $GITHUB_OUTPUT
          echo "with_brand=${WITH_BRAND}"    >> $GITHUB_OUTPUT
          echo "with_brand_ja=${WITH_BRAND_JA}" >> $GITHUB_OUTPUT

      # rank/1 を最下段までロードして series_url を付与（Playwright・互換修正版）
      - name: Append series_url from /rank/1 (Playwright full scroll)
        run: |
          python tools/append_series_url_from_web.playwright_full.py \
            --rank-url https://www.autohome.com.cn/rank/1 \
            --input  "${{ steps.paths.outputs.raw }}" \
            --output "${{ steps.paths.outputs.with_series }}" \
            --name-col model \
            --max-rounds 40 \
            --idle-ms 600 \
            --min-delta 1

      # <title> から model=[…]優先・brandは直後を採用、失敗時のみ LLM 補完
      - name: Enrich brand/model from <title> via LLM (rule-first)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python tools/enrich_brand_from_title.py \
            --input  "${{ steps.paths.outputs.with_series }}" \
            --output "${{ steps.paths.outputs.with_brand }}" \
            --model  gpt-4o-mini \
            --conf-threshold 0.7

      # 追加：brand/model の日本語訳を2列追加（brand_ja / model_ja）
      - name: Translate brand/model to Japanese (LLM + cache)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python tools/translate_brand_model_ja.py \
            --input  "${{ steps.paths.outputs.with_brand }}" \
            --output "${{ steps.paths.outputs.with_brand_ja }}" \
            --model  gpt-4o-mini

      - name: List outputs before commit
        run: |
          echo "== ls -lh data =="
          ls -lh data | sed -e 's/^/  /'
          echo "== git status -s =="
          git status -s

      - name: Commit artifacts
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add \
            "${{ steps.paths.outputs.with_series }}" \
            "${{ steps.paths.outputs.with_brand }}" \
            "${{ steps.paths.outputs.with_brand_ja }}" || true
          git status -s
          git commit -m "monthly enrich: ${{ steps.paths.outputs.ym }} (series_url, title->brand/model, ja translation)" || echo "Nothing to commit"
          git push
